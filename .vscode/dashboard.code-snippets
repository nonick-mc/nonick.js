{
  "create setting form": {
    "prefix": "create_setting_form",
    "scope": "typescriptreact",
    "body": [
      "'use client';",
      "",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import { useParams } from 'next/navigation';",
      "import { FormProvider, useForm } from 'react-hook-form';",
      "import { toast } from 'sonner';",
      "import type { z } from 'zod';",
      "import { FormChangePublisher, FormDevTool } from '@/components/form';",
      "import { updateSettingAction } from './action';",
      "import { formSchema } from './schema';",
      "",
      "type FormProps = {",
      "  setting?: z.infer<typeof formSchema>;",
      "};",
      "",
      "export function SettingForm({ setting }: FormProps) {",
      "  const { guildId } = useParams<Awaited<PageProps<'$1'>['params']>>();",
      "  const bindUpdateSettingAction = updateSettingAction.bind(null, guildId);",
      "",
      "  const form = useForm({",
      "    resolver: zodResolver(formSchema),",
      "    defaultValues: setting || {",
      "      $2",
      "    },",
      "  });",
      "",
      "  async function onSubmit(values: z.infer<typeof formSchema>) {",
      "    const res = await bindUpdateSettingAction(values);",
      "    if (res.serverError || res.validationErrors) {",
      "      return toast.error('設定の更新中に問題が発生しました。時間をおいて再度お試しください。');",
      "    }",
      "    form.reset(values);",
      "  }",
      "",
      "  return (",
      "    <FormProvider {...form}>",
      "      <form onSubmit={form.handleSubmit(onSubmit)} className='flex flex-col gap-6 pb-24'>",
      "        <FormChangePublisher />",
      "      </form>",
      "      <FormDevTool />",
      "    </FormProvider>",
      "  );",
      "}"
    ]
  },
  "create setting page": {
    "prefix": "create_setting_page",
    "scope": "typescriptreact",
    "body": [
      "import type { Metadata } from 'next';",
      "import { Header } from '@/components/header';",
      "import { verifyDashboardAccessPermission } from '@/lib/dal';",
      "import { db } from '@/lib/drizzle';",
      "import { SettingForm } from './form';",
      "import { formSchema } from './schema';",
      "",
      "export const metadata: Metadata = {",
      "  title: '$1',",
      "};",
      "",
      "export default async function Page({ params }: PageProps<'$2'>) {",
      "  const { guildId } = await params;",
      "  await verifyDashboardAccessPermission(guildId);",
      "",
      "  const [setting] = await Promise.all([",
      "    db.query.$3.findFirst({",
      "      where: (setting, { eq }) => eq(setting.guildId, guildId),",
      "    }),",
      "  ]);",
      "",
      "  return (",
      "    <>",
      "      <Header",
      "        title=''",
      "        description=''",
      "      />",
      "      <SettingForm",
      "        setting={formSchema.safeParse(setting).data}",
      "      />",
      "    </>",
      "  );",
      "}"
    ]
  },
  "create setting action": {
    "prefix": "create_setting_action",
    "scope": "typescript",
    "body": [
      "'use server';",
      "",
      "import { auditLog } from '@repo/database';",
      "import { revalidatePath } from 'next/cache';",
      "import { db } from '@/lib/drizzle';",
      "import { guildActionClient } from '@/lib/safe-action/clients';",
      "import { formSchema } from './schema';",
      "",
      "export const updateSettingAction = guildActionClient",
      "  .inputSchema(formSchema)",
      "  .action(async ({ parsedInput, bindArgsParsedInputs: [guildId], ctx: { session } }) => {",
      "    const currentSetting = await db.query.$1.findFirst({",
      "      where: (setting, { eq }) => eq(setting.guildId, guildId),",
      "    });",
      "",
      "    const [newSetting] = await db",
      "      .insert($2)",
      "      .values({ guildId, ...parsedInput })",
      "      .onConflictDoUpdate({ target: $2.guildId, set: parsedInput })",
      "      .returning();",
      "",
      "    await db.insert(auditLog).values({",
      "      guildId,",
      "      authorId: session.user.discordUserId,",
      "      targetName: '$3',",
      "      actionType: '$4',",
      "      oldValue: currentSetting,",
      "      newValue: newSetting,",
      "    });",
      "",
      "    revalidatePath('/');",
      "  });"
    ]
  },
  "create setting schema": {
    "prefix": "create_setting_schema",
    "scope": "typescript",
    "body": [
      "import { createInsertSchema } from 'drizzle-zod';",
      "import { z } from 'zod';",
      "",
      "z.config(z.locales.ja());",
      "",
      "export const formSchema = createInsertSchema($1);"
    ]
  }
}
